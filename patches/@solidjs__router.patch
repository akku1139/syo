diff --git a/dist/index.js b/dist/index.js
index 6a7b7f3b8a5157c689e774f84632adc86bf4b9cb..9528f9b824cf0ff7334f30fd923823f2f2d7f564 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -254,18 +254,18 @@ const useHref = to => {
 
 /**
  * Retrieves method to do navigation. The method accepts a path to navigate to and an optional object with the following options:
- * 
+ *
  * - resolve (*boolean*, default `true`): resolve the path against the current route
  * - replace (*boolean*, default `false`): replace the history entry
  * - scroll (*boolean*, default `true`): scroll to top after navigation
  * - state (*any*, default `undefined`): pass custom state to `location.state`
- * 
+ *
  * **Note**: The state is serialized using the structured clone algorithm which does not support all object types.
- * 
+ *
  * @example
  * ```js
  * const navigate = useNavigate();
- * 
+ *
  * if (unauthorized) {
  *   navigate("/login", { replace: true });
  * }
@@ -275,11 +275,11 @@ const useNavigate = () => useRouter().navigatorFactory();
 
 /**
  * Retrieves reactive `location` object useful for getting things like `pathname`.
- * 
+ *
  * @example
  * ```js
  * const location = useLocation();
- * 
+ *
  * const pathname = createMemo(() => parsePath(location.pathname));
  * ```
  */
@@ -288,11 +288,11 @@ const useLocation = () => useRouter().location;
 /**
  * Retrieves signal that indicates whether the route is currently in a *Transition*.
  * Useful for showing stale/pending state when the route resolution is *Suspended* during concurrent rendering.
- * 
+ *
  * @example
  * ```js
  * const isRouting = useIsRouting();
- * 
+ *
  * return (
  *   <div classList={{ "grey-out": isRouting() }}>
  *     <MyAwesomeContent />
@@ -305,11 +305,11 @@ const useIsRouting = () => useRouter().isRouting;
 /**
  * usePreloadRoute returns a function that can be used to preload a route manual.
  * This is what happens automatically with link hovering and similar focus based behavior, but it is available here as an API.
- * 
+ *
  * @example
  * ```js
  * const preload = usePreloadRoute();
- * 
+ *
  * preload(`/users/settings`, { preloadData: true });
  * ```
  */
@@ -321,11 +321,11 @@ const usePreloadRoute = () => {
 /**
  * `useMatch` takes an accessor that returns the path and creates a `Memo` that returns match information if the current path matches the provided path.
  * Useful for determining if a given path matches the current route.
- * 
+ *
  * @example
  * ```js
  * const match = useMatch(() => props.href);
- * 
+ *
  * return <div classList={{ active: Boolean(match()) }} />;
  * ```
  */
@@ -343,11 +343,11 @@ const useMatch = (path, matchFilters) => {
 /**
  * `useCurrentMatches` returns all the matches for the current matched route.
  * Useful for getting all the route information.
- * 
+ *
  * @example
  * ```js
  * const matches = useCurrentMatches();
- * 
+ *
  * const breadcrumbs = createMemo(() => matches().map(m => m.route.info.breadcrumb))
  * ```
  */
@@ -355,11 +355,11 @@ const useCurrentMatches = () => useRouter().matches;
 
 /**
  * Retrieves a reactive, store-like object containing the current route path parameters as defined in the Route.
- * 
+ *
  * @example
  * ```js
  * const params = useParams();
- * 
+ *
  * // fetch user based on the id path parameter
  * const [user] = createResource(() => params.id, fetchUser);
  * ```
@@ -370,15 +370,15 @@ const useParams = () => useRouter().params;
  * Retrieves a tuple containing a reactive object to read the current location's query parameters and a method to update them.
  * The object is a proxy so you must access properties to subscribe to reactive updates.
  * **Note** that values will be strings and property names will retain their casing.
- * 
+ *
  * The setter method accepts an object whose entries will be merged into the current query string.
  * Values `''`, `undefined` and `null` will remove the key from the resulting query string.
  * Updates will behave just like a navigation and the setter accepts the same optional second parameter as `navigate` and auto-scrolling is disabled by default.
- * 
+ *
  * @examples
  * ```js
  * const [searchParams, setSearchParams] = useSearchParams();
- * 
+ *
  * return (
  *   <div>
  *     <span>Page: {searchParams.page}</span>
@@ -410,14 +410,14 @@ const useSearchParams = () => {
 /**
  * useBeforeLeave takes a function that will be called prior to leaving a route.
  * The function will be called with:
- * 
+ *
  * - from (*Location*): current location (before change).
  * - to (*string | number*): path passed to `navigate`.
  * - options (*NavigateOptions*): options passed to navigate.
  * - preventDefault (*function*): call to block the route change.
  * - defaultPrevented (*readonly boolean*): `true` if any previously called leave handlers called `preventDefault`.
  * - retry (*function*, force?: boolean ): call to retry the same navigation, perhaps after confirming with the user. Pass `true` to skip running the leave handlers again (i.e. force navigate without confirming).
- * 
+ *
  * @example
  * ```js
  * useBeforeLeave((e: BeforeLeaveEventArgs) => {
@@ -1634,8 +1634,8 @@ function MemoryRouter(props) {
   })(props);
 }
 
-var _tmpl$ = /*#__PURE__*/template(`<a>`);
 function A(props) {
+  var _tmpl$ = /*#__PURE__*/template(`<a>`);
   props = mergeProps({
     inactiveClass: "inactive",
     activeClass: "active"
